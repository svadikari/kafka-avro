/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.shyam.avro.order;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1361521882233660844L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"com.shyam.avro.order\",\"fields\":[{\"name\":\"orderNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"shipTo\",\"type\":{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"AddressType\",\"symbols\":[\"UNKNOWN\",\"MAILING\",\"BILLING\"],\"default\":\"UNKNOWN\"}},{\"name\":\"line1\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"line2\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"city\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"state\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"zipCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}},{\"name\":\"payment\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Payment\",\"fields\":[{\"name\":\"paymentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Type of payments, possible values [CC, GC, AP, PP]\",\"default\":null},{\"name\":\"amount\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":5,\"scale\":4}],\"default\":null},{\"name\":\"currency\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Order> ENCODER =
      new BinaryMessageEncoder<Order>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Order> DECODER =
      new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Order> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Order> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Order to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Order from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Order instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Order fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String orderNumber;
  @Deprecated public com.shyam.avro.order.Address shipTo;
  @Deprecated public com.shyam.avro.order.Payment payment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param orderNumber The new value for orderNumber
   * @param shipTo The new value for shipTo
   * @param payment The new value for payment
   */
  public Order(java.lang.String orderNumber, com.shyam.avro.order.Address shipTo, com.shyam.avro.order.Payment payment) {
    this.orderNumber = orderNumber;
    this.shipTo = shipTo;
    this.payment = payment;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderNumber;
    case 1: return shipTo;
    case 2: return payment;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderNumber = value$ != null ? value$.toString() : null; break;
    case 1: shipTo = (com.shyam.avro.order.Address)value$; break;
    case 2: payment = (com.shyam.avro.order.Payment)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'orderNumber' field.
   * @return The value of the 'orderNumber' field.
   */
  public java.lang.String getOrderNumber() {
    return orderNumber;
  }


  /**
   * Sets the value of the 'orderNumber' field.
   * @param value the value to set.
   */
  public void setOrderNumber(java.lang.String value) {
    this.orderNumber = value;
  }

  /**
   * Gets the value of the 'shipTo' field.
   * @return The value of the 'shipTo' field.
   */
  public com.shyam.avro.order.Address getShipTo() {
    return shipTo;
  }


  /**
   * Sets the value of the 'shipTo' field.
   * @param value the value to set.
   */
  public void setShipTo(com.shyam.avro.order.Address value) {
    this.shipTo = value;
  }

  /**
   * Gets the value of the 'payment' field.
   * @return The value of the 'payment' field.
   */
  public com.shyam.avro.order.Payment getPayment() {
    return payment;
  }


  /**
   * Sets the value of the 'payment' field.
   * @param value the value to set.
   */
  public void setPayment(com.shyam.avro.order.Payment value) {
    this.payment = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static com.shyam.avro.order.Order.Builder newBuilder() {
    return new com.shyam.avro.order.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static com.shyam.avro.order.Order.Builder newBuilder(com.shyam.avro.order.Order.Builder other) {
    if (other == null) {
      return new com.shyam.avro.order.Order.Builder();
    } else {
      return new com.shyam.avro.order.Order.Builder(other);
    }
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static com.shyam.avro.order.Order.Builder newBuilder(com.shyam.avro.order.Order other) {
    if (other == null) {
      return new com.shyam.avro.order.Order.Builder();
    } else {
      return new com.shyam.avro.order.Order.Builder(other);
    }
  }

  /**
   * RecordBuilder for Order instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    private java.lang.String orderNumber;
    private com.shyam.avro.order.Address shipTo;
    private com.shyam.avro.order.Address.Builder shipToBuilder;
    private com.shyam.avro.order.Payment payment;
    private com.shyam.avro.order.Payment.Builder paymentBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.shyam.avro.order.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderNumber)) {
        this.orderNumber = data().deepCopy(fields()[0].schema(), other.orderNumber);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.shipTo)) {
        this.shipTo = data().deepCopy(fields()[1].schema(), other.shipTo);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasShipToBuilder()) {
        this.shipToBuilder = com.shyam.avro.order.Address.newBuilder(other.getShipToBuilder());
      }
      if (isValidValue(fields()[2], other.payment)) {
        this.payment = data().deepCopy(fields()[2].schema(), other.payment);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasPaymentBuilder()) {
        this.paymentBuilder = com.shyam.avro.order.Payment.newBuilder(other.getPaymentBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(com.shyam.avro.order.Order other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.orderNumber)) {
        this.orderNumber = data().deepCopy(fields()[0].schema(), other.orderNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.shipTo)) {
        this.shipTo = data().deepCopy(fields()[1].schema(), other.shipTo);
        fieldSetFlags()[1] = true;
      }
      this.shipToBuilder = null;
      if (isValidValue(fields()[2], other.payment)) {
        this.payment = data().deepCopy(fields()[2].schema(), other.payment);
        fieldSetFlags()[2] = true;
      }
      this.paymentBuilder = null;
    }

    /**
      * Gets the value of the 'orderNumber' field.
      * @return The value.
      */
    public java.lang.String getOrderNumber() {
      return orderNumber;
    }


    /**
      * Sets the value of the 'orderNumber' field.
      * @param value The value of 'orderNumber'.
      * @return This builder.
      */
    public com.shyam.avro.order.Order.Builder setOrderNumber(java.lang.String value) {
      validate(fields()[0], value);
      this.orderNumber = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderNumber' field has been set.
      * @return True if the 'orderNumber' field has been set, false otherwise.
      */
    public boolean hasOrderNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderNumber' field.
      * @return This builder.
      */
    public com.shyam.avro.order.Order.Builder clearOrderNumber() {
      orderNumber = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'shipTo' field.
      * @return The value.
      */
    public com.shyam.avro.order.Address getShipTo() {
      return shipTo;
    }


    /**
      * Sets the value of the 'shipTo' field.
      * @param value The value of 'shipTo'.
      * @return This builder.
      */
    public com.shyam.avro.order.Order.Builder setShipTo(com.shyam.avro.order.Address value) {
      validate(fields()[1], value);
      this.shipToBuilder = null;
      this.shipTo = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'shipTo' field has been set.
      * @return True if the 'shipTo' field has been set, false otherwise.
      */
    public boolean hasShipTo() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'shipTo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.shyam.avro.order.Address.Builder getShipToBuilder() {
      if (shipToBuilder == null) {
        if (hasShipTo()) {
          setShipToBuilder(com.shyam.avro.order.Address.newBuilder(shipTo));
        } else {
          setShipToBuilder(com.shyam.avro.order.Address.newBuilder());
        }
      }
      return shipToBuilder;
    }

    /**
     * Sets the Builder instance for the 'shipTo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.shyam.avro.order.Order.Builder setShipToBuilder(com.shyam.avro.order.Address.Builder value) {
      clearShipTo();
      shipToBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'shipTo' field has an active Builder instance
     * @return True if the 'shipTo' field has an active Builder instance
     */
    public boolean hasShipToBuilder() {
      return shipToBuilder != null;
    }

    /**
      * Clears the value of the 'shipTo' field.
      * @return This builder.
      */
    public com.shyam.avro.order.Order.Builder clearShipTo() {
      shipTo = null;
      shipToBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'payment' field.
      * @return The value.
      */
    public com.shyam.avro.order.Payment getPayment() {
      return payment;
    }


    /**
      * Sets the value of the 'payment' field.
      * @param value The value of 'payment'.
      * @return This builder.
      */
    public com.shyam.avro.order.Order.Builder setPayment(com.shyam.avro.order.Payment value) {
      validate(fields()[2], value);
      this.paymentBuilder = null;
      this.payment = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'payment' field has been set.
      * @return True if the 'payment' field has been set, false otherwise.
      */
    public boolean hasPayment() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'payment' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.shyam.avro.order.Payment.Builder getPaymentBuilder() {
      if (paymentBuilder == null) {
        if (hasPayment()) {
          setPaymentBuilder(com.shyam.avro.order.Payment.newBuilder(payment));
        } else {
          setPaymentBuilder(com.shyam.avro.order.Payment.newBuilder());
        }
      }
      return paymentBuilder;
    }

    /**
     * Sets the Builder instance for the 'payment' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.shyam.avro.order.Order.Builder setPaymentBuilder(com.shyam.avro.order.Payment.Builder value) {
      clearPayment();
      paymentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'payment' field has an active Builder instance
     * @return True if the 'payment' field has an active Builder instance
     */
    public boolean hasPaymentBuilder() {
      return paymentBuilder != null;
    }

    /**
      * Clears the value of the 'payment' field.
      * @return This builder.
      */
    public com.shyam.avro.order.Order.Builder clearPayment() {
      payment = null;
      paymentBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Order build() {
      try {
        Order record = new Order();
        record.orderNumber = fieldSetFlags()[0] ? this.orderNumber : (java.lang.String) defaultValue(fields()[0]);
        if (shipToBuilder != null) {
          try {
            record.shipTo = this.shipToBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("shipTo"));
            throw e;
          }
        } else {
          record.shipTo = fieldSetFlags()[1] ? this.shipTo : (com.shyam.avro.order.Address) defaultValue(fields()[1]);
        }
        if (paymentBuilder != null) {
          try {
            record.payment = this.paymentBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("payment"));
            throw e;
          }
        } else {
          record.payment = fieldSetFlags()[2] ? this.payment : (com.shyam.avro.order.Payment) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Order>
    WRITER$ = (org.apache.avro.io.DatumWriter<Order>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Order>
    READER$ = (org.apache.avro.io.DatumReader<Order>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










